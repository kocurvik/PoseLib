//
// Created by kocur on 14-May-24.
//

#include "PoseLib/camera_pose.h"
#include "PoseLib/solvers/relpose_k2Fk1_9pt_utils.h"
#include "rd_utils.h"
#include "PoseLib/misc/sturm.h"

#include <Eigen/Dense>
#include <vector>

namespace poselib {

void relpose_k2Fk1_9pt_fast_eigenvector_solver(
        double *eigv,
        int neig,
        Eigen::MatrixXd &AM,
        Eigen::Matrix<std::complex<double>,2,48> &sols) {
    static const int ind[] = { 0,1,2,3,7,14,17,21,24,29,34,38,41,46 };
    // Truncated action matrix containing non-trivial rows
    Eigen::Matrix<double, 14, 48> AMs;
    double zi[8];

    for (int i = 0; i < 14; i++)	{
        AMs.row(i) = AM.row(ind[i]);
    }
    for (int i = 0; i < neig; i++) {
        zi[0] = eigv[i];
        for (int j = 1; j < 8; j++)
        {
            zi[j] = zi[j - 1] * eigv[i];
        }
        Eigen::Matrix<double, 14,11> AA;
        AA.col(0) = zi[5] * AMs.col(41) + zi[4] * AMs.col(42) + zi[3] * AMs.col(43) + zi[2] * AMs.col(44);
        AA.col(1) = zi[5] * AMs.col(34) + zi[4] * AMs.col(35) + zi[3] * AMs.col(36) + zi[2] * AMs.col(37);
        AA.col(2) = zi[4] * AMs.col(2) + zi[3] * AMs.col(6) + zi[2] * AMs.col(10) + zi[1] * AMs.col(13);
        AA.col(3) = zi[5] * AMs.col(1) + zi[4] * AMs.col(5) + zi[0] * AMs.col(38);
        AA.col(4) = zi[6] * AMs.col(0) + zi[5] * AMs.col(4) + zi[4] * AMs.col(9) + zi[3] * AMs.col(12) + zi[2] * AMs.col(16) + zi[1] * AMs.col(20) + zi[0] * AMs.col(39) + AMs.col(45);
        AA.col(5) = zi[6] * AMs.col(3) + zi[5] * AMs.col(8) + zi[4] * AMs.col(11) + zi[3] * AMs.col(15) + zi[2] * AMs.col(19) + AMs.col(46);
        AA.col(6) = zi[6] * AMs.col(7) + zi[4] * AMs.col(14) + zi[3] * AMs.col(18) + zi[2] * AMs.col(23) + zi[1] * AMs.col(27) + zi[0] * AMs.col(40) + AMs.col(47);
        AA.col(7) = zi[4] * AMs.col(17) + zi[3] * AMs.col(22) + zi[2] * AMs.col(26);
        AA.col(8) = zi[4] * AMs.col(21) + zi[3] * AMs.col(25) + zi[2] * AMs.col(30);
        AA.col(9) = zi[3] * AMs.col(29);
        AA.col(10) = zi[5] * AMs.col(24) + zi[4] * AMs.col(28) + zi[3] * AMs.col(31) + zi[2] * AMs.col(32) + zi[1] * AMs.col(33);

        AA(0,4) = AA(0,4) - zi[7];
        AA(1,3) = AA(1,3) - zi[6];
        AA(2,2) = AA(2,2) - zi[5];
        AA(3,5) = AA(3,5) - zi[7];
        AA(4,6) = AA(4,6) - zi[7];
        AA(5,6) = AA(5,6) - zi[5];
        AA(6,7) = AA(6,7) - zi[5];
        AA(7,8) = AA(7,8) - zi[5];
        AA(8,10) = AA(8,10) - zi[6];
        AA(9,9) = AA(9,9) - zi[4];
        AA(10,1) = AA(10,1) - zi[6];
        AA(11,3) = AA(11,3) - zi[1];
        AA(12,0) = AA(12,0) - zi[6];
        AA(13,5) = AA(13,5) - zi[0];

//        Eigen::Matrix<double, 10, 1>  s = AA.leftCols(10).colPivHouseholderQr().solve(-AA.col(10));
        Eigen::Matrix<double, 10, 1>  s = AA.leftCols(10).householderQr().solve(-AA.col(10));
        sols(0,i) = zi[0];
        sols(1,i) = s(9);
    }
}

Eigen::MatrixXcd relpose_k2Fk1_9pt_solver_new(const double *d) {
    Eigen::VectorXd coeffs(97);
    coeffs[0] = d[0];
    coeffs[1] = d[1];
    coeffs[2] = d[9];
    coeffs[3] = d[2];
    coeffs[4] = d[10];
    coeffs[5] = d[18];
    coeffs[6] = d[3];
    coeffs[7] = d[11];
    coeffs[8] = d[19];
    coeffs[9] = d[27];
    coeffs[10] = d[4];
    coeffs[11] = d[12];
    coeffs[12] = d[20];
    coeffs[13] = d[28];
    coeffs[14] = d[36];
    coeffs[15] = d[5];
    coeffs[16] = d[13];
    coeffs[17] = d[21];
    coeffs[18] = d[29];
    coeffs[19] = d[37];
    coeffs[20] = d[45];
    coeffs[21] = d[6];
    coeffs[22] = d[14];
    coeffs[23] = d[22];
    coeffs[24] = d[30];
    coeffs[25] = d[38];
    coeffs[26] = d[46];
    coeffs[27] = d[54];
    coeffs[28] = d[7];
    coeffs[29] = d[15];
    coeffs[30] = d[23];
    coeffs[31] = d[31];
    coeffs[32] = d[39];
    coeffs[33] = d[47];
    coeffs[34] = d[55];
    coeffs[35] = d[63];
    coeffs[36] = d[8];
    coeffs[37] = d[16];
    coeffs[38] = d[24];
    coeffs[39] = d[32];
    coeffs[40] = d[40];
    coeffs[41] = d[48];
    coeffs[42] = d[56];
    coeffs[43] = d[64];
    coeffs[44] = d[72];
    coeffs[45] = d[17];
    coeffs[46] = d[25];
    coeffs[47] = d[33];
    coeffs[48] = d[41];
    coeffs[49] = d[49];
    coeffs[50] = d[57];
    coeffs[51] = d[65];
    coeffs[52] = d[73];
    coeffs[53] = d[26];
    coeffs[54] = d[34];
    coeffs[55] = d[42];
    coeffs[56] = d[50];
    coeffs[57] = d[58];
    coeffs[58] = d[66];
    coeffs[59] = d[74];
    coeffs[60] = d[35];
    coeffs[61] = d[43];
    coeffs[62] = d[51];
    coeffs[63] = d[59];
    coeffs[64] = d[67];
    coeffs[65] = d[75];
    coeffs[66] = d[44];
    coeffs[67] = d[52];
    coeffs[68] = d[60];
    coeffs[69] = d[68];
    coeffs[70] = d[76];
    coeffs[71] = d[53];
    coeffs[72] = d[61];
    coeffs[73] = d[69];
    coeffs[74] = d[77];
    coeffs[75] = d[62];
    coeffs[76] = d[70];
    coeffs[77] = d[78];
    coeffs[78] = d[71];
    coeffs[79] = d[79];
    coeffs[80] = d[80];
    coeffs[81] = d[81];
    coeffs[82] = d[82];
    coeffs[83] = d[85];
    coeffs[84] = d[83];
    coeffs[85] = d[86];
    coeffs[86] = d[89];
    coeffs[87] = d[84];
    coeffs[88] = d[87];
    coeffs[89] = d[90];
    coeffs[90] = d[93];
    coeffs[91] = d[88];
    coeffs[92] = d[91];
    coeffs[93] = d[94];
    coeffs[94] = d[92];
    coeffs[95] = d[95];
    coeffs[96] = d[96];

    // Setup elimination template
    static const int coeffs0_ind[] = { 0,81,1,0,81,82,3,1,0,81,82,84,6,3,1,81,82,84,87,7,4,2,81,83,82,85,88,84,27,83,86,90,28,21,15,81,82,84,87,32,25,19,93,81,87,84,91,88,82,83,85,90,95,96,94,89,86,92,34,27,85,83,89,86,93,90,35,86,90,36,28,21,82,84,87,37,29,22,83,85,81,88,82,91,84,87,41,33,26,87,83,84,91,81,88,94,82,92,85,86,89,96,93,90,95,43,35,89,86,93,90,44,90,36,28,84,87,45,37,29,85,88,82,91,84,87,51,43,35,92,89,95,93,86,90,52,44,93,90,36,87,45,37,88,91,84,87,59,52,44,95,93,90,53,46,92,94,88,91,84,87,63,57,50,92,88,91,94,95,96,86,93,89,90,85,83,65,59,52,96,95,90,93,72,68,63,92,96,94,86,95,85,93,91,88,89,83,90,71,67,95,96,88,87,94,91,84,92,75,72,68,94,89,96,88,95,91,92,85,93,76,73,69,95,96,90,89,94,92,93,86,75,72,92,91,96,94,88,95,78,76,73,96,93,92,94,95,89,79,77,74,93,96,95,90,78,76,95,94,96,92,80,79,77,95,96,93,78,96,94,80,79,96,95,80,96,10,6,3,82,81,84,87,11,7,4,83,82,85,81,84,88,91,87,12,8,5,83,86,85,89,92,88,84,81,82,15,10,6,84,81,82,87,21,15,10,87,81,82,84,38,30,23,94,86,89,83,92,85,81,91,82,88,84,87,46,38,30,86,89,83,92,85,94,88,81,82,84,91,87,53,46,38,89,92,85,94,88,91,82,84,87,45,91,87,60,54,95,96,92,94,88,91,87,84,4,2,81,83,85,82,50,42,34,91,86,88,94,83,92,96,85,95,89,90,93,2,83,81,69,64,58,95,92,94,96,90,93,89,86 };
    static const int coeffs1_ind[] = { 16,11,7,85,84,83,88,82,87,91,81,17,12,8,86,85,89,83,88,92,94,91,87,82,81,84,18,13,9,86,84,82,81,90,89,93,95,92,88,83,85,22,16,11,88,87,83,85,81,91,84,82,23,17,12,89,88,86,92,85,91,94,83,81,84,82,87,24,18,13,90,89,87,84,81,82,93,86,92,95,96,94,91,85,83,88,25,19,14,90,84,82,88,85,81,83,93,95,92,86,89,29,22,16,91,83,85,81,88,82,87,84,30,23,17,92,91,86,89,83,94,88,81,85,82,87,84,31,24,18,93,92,87,90,82,84,81,95,89,94,96,86,83,88,85,91,33,26,20,84,82,88,85,92,81,89,83,86,95,90,93,39,31,24,95,94,90,93,86,84,87,82,81,96,92,83,89,85,91,88,40,32,25,95,82,87,91,84,85,88,83,81,93,96,90,86,92,89,94,42,34,27,88,85,92,89,95,83,93,86,90,47,39,31,96,90,93,86,95,89,87,83,84,82,81,94,85,92,88,91,48,40,32,96,84,90,87,88,91,81,85,82,83,95,86,93,89,94,92,49,41,33,85,87,82,91,84,94,88,89,92,86,83,81,90,95,93,96,54,47,39,90,93,86,95,89,96,92,83,85,87,84,82,88,81,94,91,55,48,40,87,90,93,91,82,86,88,84,85,83,81,96,89,95,92,94,56,49,41,88,84,87,91,92,94,83,89,85,86,82,81,90,93,96,95,57,50,42,89,91,85,94,88,96,92,93,95,90,86,83,60,54,47,93,95,89,96,92,94,85,88,87,84,91,82,61,55,48,90,93,95,86,84,89,91,87,81,88,85,82,92,83,96,94,62,56,49,91,87,94,85,90,92,88,89,81,86,84,82,83,93,95,96,53,94,91,87,66,61,55,93,95,96,89,87,92,82,91,88,84,94,85,67,62,56,90,88,93,94,91,83,92,82,89,87,84,85,81,95,86,96,68,63,57,94,91,96,89,95,92,93,83,90,88,85,86,60,96,94,91,87,66,61,95,96,92,94,84,91,87,88,71,67,62,93,91,95,85,94,84,92,87,88,82,96,89,66,96,94,87,91,71,96,91,87,94,75,94,91,96,8,5,83,86,89,85,82,81,13,9,82,81,86,90,93,89,85,83,19,14,82,81,85,83,90,93,89,86,26,20,82,81,85,83,89,86,93,90,58,51,43,94,90,92,96,86,95,89,93,64,58,51,93,94,89,96,92,95,90,86,73,69,64,96,94,93,95,86,92,89,90,5,86,83,81,9,81,90,86,83,14,81,83,90,86,20,81,83,86,90,70,65,59,96,93,95,90,74,70,65,95,96,93,90,77,74,70,96,90,95,93 };
    static const int C0_ind[] = { 0,41,51,52,91,92,102,103,104,139,142,143,153,154,155,156,190,193,194,204,205,206,208,241,243,244,245,246,255,260,264,269,306,307,308,312,316,321,325,357,358,359,361,364,366,370,371,375,378,380,381,395,396,399,404,405,406,407,408,409,413,416,417,421,422,426,459,464,468,510,511,512,516,520,525,561,562,563,567,571,572,576,577,580,581,606,612,613,614,617,619,620,621,624,625,626,629,630,633,635,636,659,660,661,662,663,664,668,671,672,676,714,719,766,767,771,775,816,817,818,822,826,827,831,832,836,867,868,869,872,875,876,880,884,888,918,919,923,926,971,975,1021,1022,1026,1030,1031,1036,1071,1072,1073,1076,1079,1088,1123,1124,1128,1132,1133,1138,1144,1148,1173,1174,1175,1180,1185,1190,1194,1196,1197,1198,1200,1201,1203,1206,1207,1224,1225,1226,1229,1232,1236,1241,1275,1276,1277,1300,1302,1303,1304,1305,1306,1307,1308,1309,1310,1311,1319,1327,1328,1348,1352,1355,1357,1358,1361,1362,1370,1377,1378,1379,1402,1406,1407,1408,1409,1411,1412,1413,1421,1428,1429,1430,1453,1456,1457,1459,1461,1462,1463,1464,1480,1481,1508,1510,1511,1514,1515,1523,1530,1531,1532,1555,1559,1561,1564,1565,1566,1581,1582,1583,1612,1614,1615,1617,1633,1634,1661,1663,1667,1668,1683,1684,1685,1714,1717,1719,1736,1763,1770,1786,1787,1816,1821,1838,1872,1887,1888,1889,1890,1906,1924,1927,1938,1939,1940,1941,1942,1975,1976,1977,1978,1979,1980,1989,1990,1991,1993,2026,2028,2029,2030,2031,2036,2037,2039,2040,2041,2042,2043,2055,2059,2077,2091,2092,2093,2094,2101,2106,2110,2142,2143,2144,2145,2152,2157,2158,2161,2162,2168,2180,2185,2187,2188,2191,2193,2194,2195,2199,2203,2204,2208,2209,2212,2213,2215,2219,2236,2238,2239,2244,2245,2246,2250,2254,2255,2259,2260,2264,2266,2270,2287,2297,2301,2306,2347,2348,2352,2356,2357,2362,2368,2372,2378,2390,2397,2398,2436,2437,2438,2439,2448,2449,2450,2453,2455,2456,2457,2460,2461,2462,2465,2466,2469,2471,2472,2499,2540,2541,2550,2551,2552,2557,2562,2567,2571,2575,2578,2583,2584 } ;
    static const int C1_ind[] = { 0,1,2,3,4,19,37,38,39,40,45,51,52,53,54,55,88,89,90,91,92,93,98,99,100,101,102,103,104,106,116,120,126,139,141,142,143,144,149,150,152,153,154,155,156,157,168,172,173,190,191,198,204,205,206,207,208,223,241,242,243,244,249,250,252,253,254,255,256,257,258,259,269,273,278,279,292,293,294,295,296,297,302,303,304,305,306,307,308,310,315,319,320,324,327,330,345,348,353,354,356,357,358,359,360,367,372,373,376,377,395,402,408,409,410,411,412,423,427,428,445,446,451,453,454,456,457,459,460,461,462,463,477,478,482,483,486,496,497,498,499,504,505,507,508,509,510,511,512,515,518,519,523,524,527,528,531,534,557,558,560,561,562,563,564,565,576,580,581,584,585,588,591,598,599,604,606,607,609,610,612,613,614,616,619,625,630,633,635,636,639,640,650,651,657,658,660,661,662,663,664,665,668,671,672,676,677,680,681,684,687,714,715,716,717,724,729,730,733,734,737,740,741,744,746,752,757,759,760,763,765,766,767,769,772,785,786,788,789,790,792,793,795,803,808,810,811,813,814,816,817,818,823,824,828,829,833,834,837,839,840,843,844,849,862,864,865,866,867,868,869,873,877,878,882,883,886,887,889,893,894,897,899,910,911,912,913,918,919,920,925,934,938,941,943,944,945,946,948,950,953,956,961,963,964,967,969,970,971,976,981,986,990,992,993,994,996,997,999,1002,1003,1012,1015,1017,1018,1020,1021,1022,1027,1028,1032,1033,1037,1038,1041,1043,1044,1047,1048,1053,1071,1072,1073,1077,1081,1082,1086,1087,1091,1093,1097,1101,1103,1114,1115,1122,1123,1124,1133,1138,1142,1144,1147,1148,1149,1150,1151,1152,1154,1157,1165,1166,1167,1168,1173,1174,1175,1180,1185,1196,1198,1199,1200,1201,1203,1204,1205,1206,1207,1208,1216,1219,1222,1226,1230,1235,1246,1275,1276,1277,1286,1291,1295,1297,1300,1301,1304,1305,1307,1310,1318,1319,1326,1327,1328,1348,1351,1352,1353,1354,1355,1356,1357,1358,1359,1360,1361,1362,1369,1370,1372,1377,1378,1379,1384,1389,1400,1402,1404,1405,1407,1408,1409,1410,1411,1412,1430,1434,1439,1450,1472,1480,1481,1490,1495,1501,1505,1508,1511,1514,1523,1530,1531,1532,1552,1555,1556,1559,1560,1561,1562,1564,1565,1566,1573,1574,1583,1592,1603,1610,1625,1634,1654,1661,1668,1676,1685,1712,1719,1727,1734,1735,1773,1774,1775,1776,1781,1784,1785,1786,1799,1803,1824,1825,1826,1827,1832,1835,1836,1837,1845,1849,1850,1854,1875,1878,1883,1886,1887,1888,1892,1895,1896,1900,1901,1905,1934,1937,1938,1939,1940,1943,1945,1946,1947,1950,1951,1955,1959,1989,1990,1991,1996,1997,2001,2002,2006,2010,2017,2022,2040,2041,2042,2047,2052,2065,2068,2071,2073,2074,2075,2091,2132,2133,2138,2142,2156,2183,2184,2189,2193,2202,2207,2235,2240,2244,2249,2253,2258,2291,2295,2296,2297,2303,2307,2312,2328,2346,2347,2348,2358,2363,2379,2380,2397,2398,2399,2409,2428,2430,2431 };

    Eigen::Matrix<double,51,51> C0; C0.setZero();
    Eigen::Matrix<double,51,48> C1; C1.setZero();
    for (int i = 0; i < 410; i++) { C0(C0_ind[i]) = coeffs(coeffs0_ind[i]); }
    for (int i = 0; i < 601; i++) { C1(C1_ind[i]) = coeffs(coeffs1_ind[i]); }

    Eigen::Matrix<double,51,48> C12 = C0.partialPivLu().solve(C1);
//    Eigen::Matrix<double,51,48> C12 = C0.fullPivLu().solve(C1);

    // Setup action matrix
    // Matrix<double,62, 48> RR;
    Eigen::MatrixXd RR(62, 48);
    RR << -C12.bottomRows(14), Eigen::Matrix<double,48,48>::Identity(48, 48);

    static const int AM_ind[] = { 0,1,2,3,14,15,16,4,17,18,20,22,23,24,5,25,26,6,28,29,30,7,31,32,8,35,36,37,38,9,39,42,45,46,10,48,49,50,11,34,41,12,55,56,57,53,13,54 };
    // Matrix<double, 48, 48> AM;
    Eigen::MatrixXd AM(48, 48);
    for (int i = 0; i < 48; i++) {
        AM.row(i) = RR.row(AM_ind[i]);
    }

    Eigen::Matrix<std::complex<double>, 2, 48> sols;
    sols.setZero();

    // Solve eigenvalue problem
    double p[1+48];
    // Matrix<double, 48, 48> AMp = AM;
    Eigen::MatrixXd AMp = AM;
    sturm::charpoly_danilevsky_piv(AMp, p);
    double roots[48];
    int nroots;
    // find_real_roots_sturm(p, 48, roots, &nroots, 8, 0);
//    nroots = realRoots (p, roots, 48);
    nroots = sturm::bisect_sturm<48>(p, roots);
//    std::cout << "Roots: ";
//    for (int i = 0; i < 48; ++i)
//        std::cout << roots[i] << ", ";
//    std::cout << std::endl;
    relpose_k2Fk1_9pt_fast_eigenvector_solver(roots, nroots, AM, sols);

    return sols;
}

int relpose_k2Fk1_9pt(const std::vector<Eigen::Vector3d> &x1, const std::vector<Eigen::Vector3d> &x2,
                      std::vector<FCamPair> *models_) {
    models_->clear();

    size_t kType = 3, kElim = 4;

    int sample_number_ = 9;

    Eigen::MatrixXd u(2, sample_number_), v(2, sample_number_);
    for (int i = 0; i < sample_number_; ++i)
    {
        u(0, i) = x1[i](0);
        u(1, i) = x1[i](1);
        v(0, i) = x2[i](0);
        v(1, i) = x2[i](1);
    }

    Eigen::MatrixXd A = Eigen::MatrixXd(sample_number_, 9), B = Eigen::MatrixXd(sample_number_, 9), C = Eigen::MatrixXd(sample_number_, 9), D = Eigen::MatrixXd(sample_number_, 9);

    if(!lincoeffs_k(u, v, kType, A, B, C, D))
    {
        std::cout << "Failed to compute the linear coefficients." << std::endl;
    }

    std::vector<int> ordo = {0, 1, 3, 4, 6, 7, 2, 5, 8};

    Eigen::MatrixXd Ar = Eigen::MatrixXd(sample_number_, 5), Br = Eigen::MatrixXd(sample_number_, 5), Cr = Eigen::MatrixXd(sample_number_, 5), Dr = Eigen::MatrixXd(sample_number_, 5);
    elimcoeffs_k(A, B, C, D, kElim, ordo, Ar, Br, Cr, Dr);

    Br = Br.rightCols(Br.cols() - 2);

    std::vector<size_t> idxCr = {0, 1, 4};
    Eigen::MatrixXd slCr(Cr.rows(), 3);
    for(size_t i=0; i<idxCr.size(); ++i)
        slCr.col(i) = Cr.col(idxCr[i]);

    Dr = Dr.rightCols(1);

    double data[97];
    relpose_k2Fk1_9pt_prepare_data(Ar, Br, slCr, Dr, data);

    std::vector<int> sz = {81, 16};
    normalize_data_eqs(data, sz);

    Eigen::MatrixXcd sols = relpose_k2Fk1_9pt_solver_new(data);

    std::vector<size_t> keptSolIndices;
//    std::cout << "Sols: " << sols.cols() << std::endl;

    for(int i=0; i<sols.cols(); ++i)
    {
        if(sols.col(i).imag().norm() > 1e-10 || sols.col(i).real().norm() < 1e-10)
            continue;
        keptSolIndices.push_back(i);
    }
    Eigen::MatrixXd vsols(sols.rows(), keptSolIndices.size());
    for(size_t i=0; i<keptSolIndices.size(); ++i)
    {
        vsols.col(i) = sols.col(keptSolIndices[i]).real();
    }

//    std::cout << "Kept indices: " << keptSolIndices.size() << std::endl;

    Eigen::VectorXd k2(vsols.cols()), k1(vsols.cols());
    k2 = vsols.row(0);
    k1 = vsols.row(1);

//    std::cout << "k1: " << k1.transpose() << std::endl;
//    std::cout << "k2: " << k2.transpose() << std::endl;
//
//    std::cout << "Ar: " << Ar.size() << " Br: " << Br.size() << " slCr: " << slCr.size() << " Dr: " << Dr.size()
//              << " k1: " << k1.size() << " k2: " << k2.size() << std::endl;

    if (k1.size() < 1)
        return 0;

    Eigen::MatrixXd Fs = relpose_k2Fk1_9pt_fundamental_from_sol(Ar, Br, slCr, Dr, k2, k1);

    models_->reserve(Fs.cols());

    for(int i=0; i<Fs.cols(); ++i)
    {
        Eigen::Matrix3d F;
        F <<    Fs.col(i)[0], Fs.col(i)[3], Fs.col(i)[6],
                Fs.col(i)[1], Fs.col(i)[4], Fs.col(i)[7],
                Fs.col(i)[2], Fs.col(i)[5], Fs.col(i)[8];

//        Eigen::JacobiSVD<Eigen::Matrix3d, Eigen::ComputeThinV> svd(F);
//        std::cout << "S: " << svd.singularValues().transpose() << std::endl;

        Camera cam1 = Camera("DIVISION_RADIAL", std::vector<double>{1.0, 0.0, 0.0, k1[i]}, -1, -1);
        Camera cam2 = Camera("DIVISION_RADIAL", std::vector<double>{1.0, 0.0, 0.0, k2[i]}, -1, -1);
        models_->push_back(FCamPair(F, cam1, cam2));
    }
    return models_->size();
}
}